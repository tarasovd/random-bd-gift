{"version":3,"sources":["win.gif","baraban.mp3","fanfary.mp3","components/wheel/Wheel.tsx","App.js","index.js"],"names":["module","exports","WheelComponent","_ref","segments","segColors","winningSegment","onFinished","primaryColor","contrastColor","buttonText","isOnlyOnce","size","window","innerWidth","upDuration","downDuration","fontFamily","fontSize","outlineWidth","playBaraban","setAttempts","randomString","chars","split","str","i","Math","floor","random","length","canvasId","useRef","wheelId","dimension","min","currentSegment","isStarted","isFinished","setFinished","useState","timerHandle","timerDelay","angleCurrent","angleDelta","canvasContext","maxSpeed","PI","upTime","downTime","spinStart","frames","centerX","centerY","useEffect","wheelInit","setTimeout","scrollTo","initCanvas","wheelDraw","canvas","document","getElementById","current","addEventListener","spin","getContext","Number","localStorage","getItem","Date","getTime","setInterval","onTimerTick","draw","duration","progress","finished","sin","clearInterval","clear","drawWheel","drawNeedle","drawSegment","key","lastAngle","angle","ctx","value","save","beginPath","moveTo","arc","lineTo","closePath","fillStyle","fill","stroke","translate","rotate","font","forEach","word","fillText","restore","len","PI2","lineWidth","strokeStyle","textBaseline","textAlign","change","replace","clearRect","React","createElement","id","className","width","height","style","pointerEvents","App","segments2","stop","stopBaraban","useSound","baraban","playFanfary","stopFanfary","fanfary","winDisplayed","setWinDisplayed","csegments","setCsegments","attempts","Fragment","Wheel","winner","setItem","tmout","src","Win","alt","ReactDOM","render"],"mappings":"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","file":"static/js/main.881303af.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/win.cff6a31d.gif\";","module.exports = __webpack_public_path__ + \"static/media/baraban.a1b48410.mp3\";","module.exports = __webpack_public_path__ + \"static/media/fanfary.a1fcb1cc.mp3\";","import React, { useEffect, useState, useRef } from 'react'\n\nexport interface WheelComponentProps {\n  segments: string[]\n  segColors: string[]\n  winningSegment: string\n  onFinished: (segment: string) => void\n  primaryColor?: string\n  contrastColor?: string\n  buttonText?: string\n  isOnlyOnce?: boolean\n  size?: number\n  upDuration?: number\n  downDuration?: number\n  fontFamily?: string\n  fontSize?: string\n  outlineWidth?: number\n  playBaraban: () => void\n  setAttempts: (attempts: number) => void\n}\n\nconst WheelComponent = ({\n  segments,\n  segColors,\n  winningSegment,\n  onFinished,\n  primaryColor = 'black',\n  contrastColor = 'white',\n  buttonText = 'Spin',\n  isOnlyOnce = false,\n  size = window.innerWidth,\n  upDuration = 100,\n  downDuration = 1000,\n  fontFamily = 'Arial',\n  fontSize = window.innerWidth <= 1080 ? '3vw' : '32px',\n  outlineWidth = 7,\n  playBaraban = () => {},\n  setAttempts = () => {}\n}: WheelComponentProps) => {\n  const randomString = () => {\n    const chars =\n      '0123456789ABCDEFGHIJKLMNOPQRSTUVWXTZabcdefghiklmnopqrstuvwxyz'.split('')\n    const length = 8\n    let str = ''\n    for (let i = 0; i < length; i++) {\n      str += chars[Math.floor(Math.random() * chars.length)]\n    }\n    return str\n  }\n  const canvasId = useRef(`canvas-${randomString()}`)\n  const wheelId = useRef(`wheel-${randomString()}`)\n  const dimension = Math.min((window.innerWidth - (window.innerWidth / 3)), 800) + 50\n  let currentSegment = ''\n  let isStarted = false\n  const [isFinished, setFinished] = useState(false)\n  let timerHandle = 0\n  const timerDelay = segments.length\n  let angleCurrent = 0\n  let angleDelta = 0\n  let canvasContext: CanvasRenderingContext2D | null = null\n  let maxSpeed = Math.PI / segments.length\n  const upTime = segments.length * upDuration\n  const downTime = segments.length * downDuration\n  let spinStart = 0\n  let frames = 0\n  const centerX = size + 20\n  const centerY = size + 20\n  useEffect(() => {\n    wheelInit()\n    setTimeout(() => {\n      window.scrollTo(0, 1)\n    }, 0)\n  // eslint-disable-next-line\n  }, [])\n\n  const wheelInit = () => {\n    initCanvas()\n    wheelDraw()\n  }\n\n  const initCanvas = () => {\n    let canvas: HTMLCanvasElement | null = document.getElementById(\n      canvasId.current\n    ) as HTMLCanvasElement\n    canvas?.addEventListener('click', spin, false)\n    canvasContext = canvas?.getContext('2d')\n  }\n  const spin = () => {\n    isStarted = true\n    if (timerHandle === 0 && Number(localStorage.getItem('attempts'))) {\n      setAttempts(Number(localStorage.getItem('attempts')) - 1);\n      // @ts-ignore\n      window.playBaraban();\n      spinStart = new Date().getTime()\n      maxSpeed = Math.PI / segments.length\n      frames = 0\n      timerHandle = window.setInterval(onTimerTick, timerDelay)\n    }\n  }\n  const onTimerTick = () => {\n    frames++\n    draw()\n    const duration = new Date().getTime() - spinStart\n    let progress = 0\n    let finished = false\n    if (duration < upTime) {\n      progress = duration / upTime\n      angleDelta = maxSpeed * Math.sin((progress * Math.PI) / 2)\n    } else {\n      progress = duration / downTime\n      angleDelta = maxSpeed * Math.sin((progress * Math.PI) / 2 + Math.PI / 2)\n\n      if (progress >= 1) {\n        if (!winningSegment || currentSegment === winningSegment) {\n          finished = true\n        }\n      }\n    }\n\n    angleCurrent += angleDelta\n    while (angleCurrent >= Math.PI * 2) angleCurrent -= Math.PI * 2\n    if (finished) {\n      setFinished(true)\n      onFinished(currentSegment)\n      clearInterval(timerHandle)\n      timerHandle = 0\n      angleDelta = 0\n    }\n  }\n\n  const wheelDraw = () => {\n    clear()\n    drawWheel()\n    drawNeedle()\n  }\n\n  const draw = () => {\n    clear()\n    drawWheel()\n    drawNeedle()\n  }\n\n  const drawSegment = (key: number, lastAngle: number, angle: number) => {\n    if (!canvasContext) {\n      return false\n    }\n    const ctx = canvasContext\n    const value = segments[key].split('/')\n    ctx.save()\n    ctx.beginPath()\n    ctx.moveTo(centerX, centerY)\n    ctx.arc(centerX, centerY, size, lastAngle, angle, false)\n    ctx.lineTo(centerX, centerY)\n    ctx.closePath()\n    ctx.fillStyle = segColors[key % segColors.length]\n    ctx.fill()\n    ctx.stroke()\n    ctx.save()\n    ctx.translate(centerX, centerY)\n    ctx.rotate((lastAngle + angle) / 2)\n    ctx.fillStyle = contrastColor\n    ctx.font = `bold ${fontSize} ${fontFamily}`\n    value.forEach((word, i) => {\n      ctx.fillText(word, size / 2 + (value.length > 1 ? 30 : 20), (value.length > 1 && i === 0) ? -10 : i * 10)\n    })\n    ctx.restore()\n  }\n\n  const drawWheel = () => {\n    if (!canvasContext) {\n      return false\n    }\n    const ctx = canvasContext\n    let lastAngle = angleCurrent\n    const len = segments.length\n    const PI2 = Math.PI * 2\n    ctx.lineWidth = 1\n    ctx.strokeStyle = primaryColor\n    ctx.textBaseline = 'middle'\n    ctx.textAlign = 'center'\n    ctx.font = '1em ' + fontFamily\n    for (let i = 1; i <= len; i++) {\n      const angle = PI2 * (i / len) + angleCurrent\n      drawSegment(i - 1, lastAngle, angle)\n      lastAngle = angle\n    }\n\n    // Draw a center circle\n    ctx.beginPath()\n    ctx.arc(centerX, centerY, 47, 0, PI2, false)\n    ctx.closePath()\n    ctx.fillStyle = primaryColor\n    ctx.lineWidth = 8\n    ctx.strokeStyle = contrastColor\n    ctx.fill()\n    ctx.font = 'bold 1em ' + fontFamily\n    ctx.fillStyle = contrastColor\n    ctx.textAlign = 'center'\n    const words = buttonText.split('/');\n    words.forEach((word, i) => {\n      ctx.fillText(word, centerX, centerY - 7 + i * 20)\n    })\n    ctx.stroke()\n\n    // Draw outer circle\n    ctx.beginPath()\n    ctx.arc(centerX, centerY, size, 0, PI2, false)\n    ctx.closePath()\n\n    ctx.lineWidth = outlineWidth\n    ctx.strokeStyle = primaryColor\n    ctx.stroke()\n  }\n\n  const drawNeedle = () => {\n    if (!canvasContext) {\n      return false\n    }\n    const ctx = canvasContext\n    ctx.lineWidth = 1\n    ctx.strokeStyle = contrastColor\n    ctx.fillStyle = contrastColor\n    ctx.beginPath()\n    ctx.moveTo(centerX + 20, centerY - 47)\n    ctx.lineTo(centerX - 20, centerY - 47)\n    ctx.lineTo(centerX, centerY - 70)\n    ctx.closePath()\n    ctx.fill()\n    const change = angleCurrent + Math.PI / 2\n    let i =\n      segments.length -\n      Math.floor((change / (Math.PI * 2)) * segments.length) -\n      1\n    if (i < 0) i = i + segments.length\n    ctx.textAlign = 'center'\n    ctx.textBaseline = 'middle'\n    ctx.fillStyle = primaryColor\n    ctx.font = 'bold 1.7em ' + fontFamily\n    currentSegment = segments[i].replace('/', ' ')\n    isStarted && ctx.fillText(currentSegment, centerX + 10, centerY + size + 50)\n  }\n\n  const clear = () => {\n    if (!canvasContext) {\n      return false\n    }\n    const ctx = canvasContext\n    ctx.clearRect(0, 0, dimension, dimension + 50)\n  }\n\n  return (\n    <div id={wheelId.current} className='wheel'>\n      <canvas\n        id={canvasId.current}\n        width={dimension}\n        height={dimension + 50}\n        style={{\n          pointerEvents: isFinished && isOnlyOnce ? 'none' : 'auto'\n        }}\n      />\n    </div>\n  )\n}\nexport default WheelComponent\n","import React, { useState } from 'react'\nimport useSound from 'use-sound'\nimport baraban from './baraban.mp3';\nimport fanfary from './fanfary.mp3';\n\nimport Wheel from './components/wheel/Wheel';\nimport Win from './win.gif';\nimport './index.css'\n\nconst App = () => {\n  const segments = [\n    '1000000$',\n    'Ящик кетамина',\n    '4-ый гольф',\n    'Исходный код',\n    'Въебать марку',\n    'С Урбаном/на Мальту',\n    'Бакс',\n    'Выпрямиться',\n    'Такси/до Сигулды',\n    '5л спрея/для носа',\n    'Лиза',\n    'Носки'\n  ]\n  const segments2 = [\n    'Алкотестер',\n    'Алкотестер',\n    'Алкотестер',\n    'Алкотестер',\n    'Алкотестер',\n    'Алкотестер',\n    'Алкотестер',\n    'Алкотестер',\n    'Алкотестер',\n    'Алкотестер',\n    'Алкотестер',\n    'Алкотестер',\n  ]\n  const segColors = [\n    '#EE4040',\n    '#F0CF50',\n    '#815CD1',\n    '#3DA5E0',\n    '#34A24F',\n    '#F9AA1F',\n    '#EC3F3F',\n    '#FF9000',\n    '#F0CF50',\n    '#815CD1',\n    '#3DA5E0',\n    '#34A24F',\n    '#F9AA1F',\n    '#EC3F3F',\n    '#FF9000'\n  ]\n  const [playBaraban, { stop: stopBaraban }] = useSound(baraban);\n  const [playFanfary, { stop: stopFanfary }] = useSound(fanfary);\n  window.playBaraban = playBaraban;\n  window.stopBaraban = stopBaraban;\n  window.playFanfary = playFanfary;\n  window.stopFanfary = stopFanfary;\n  const [winDisplayed, setWinDisplayed] = useState(false);\n  const [csegments, setCsegments] = useState(segments);\n  const [attempts, setAttempts] = useState(localStorage.getItem('attempts'))\n  const onFinished = (winner) => {\n    localStorage.setItem('attempts', localStorage.getItem('attempts') - 1)\n    window.stopBaraban();\n    window.playFanfary();\n    let tmout = 10000;\n    if (localStorage.getItem('attempts') <= 0) {\n      winner = 'Алкотестер';\n      tmout = 60000;\n      setCsegments(segments2);\n    } else if (localStorage.getItem('attempts') <= 1) {\n        winner = 'Въебать марку';\n    } else if (localStorage.getItem('attempts') <= 2) {\n        winner = 'Выпрямиться';\n    }\n    setWinDisplayed(winner);\n    setTimeout(() => {\n      setWinDisplayed(false);\n      window.stopFanfary();\n    }, tmout);\n  }\n  return (\n    <React.Fragment>\n      <h1>Happy Birthday Bark! Испытай удачу в этом абсолютно честном колесе фортуны 2k25</h1>\n      <div className='wrapper'>\n        <h2 className={ attempts <= 0 ? 'red' : ''}>{ attempts > 0 ? `Попыток осталось: ${ attempts }` : 'Чтобы пополнить попытки внесите 457€' }</h2>\n        <Wheel\n          segments={csegments}\n          segColors={segColors}\n          onFinished={(winner) => onFinished(winner)}\n          primaryColor='black'\n          contrastColor='white'\n          buttonText='Вращайте/барабан'\n          size={Math.min(window.innerWidth / 3, 400)}\n          upDuration={200}\n          downDuration={1801}\n          winningSegment={segments[11]}\n          playBaraban={playBaraban}\n          setAttempts={setAttempts}\n        />\n      </div>\n      { winDisplayed === 'Алкотестер' ? (\n        <div className='wingif'>\n          <p>\n            <h3>Ура! Ты выиграл: { winDisplayed }</h3>\n            <h3>Я в ахуе вообще</h3>\n          </p>\n          <img src={Win} alt='win' />\n        </div>\n      ) : null }\n      { (winDisplayed && winDisplayed !== 'Алкотестер') ? (\n        <div className='wingif'>\n          <p>\n            <h3>Ура! Ты выиграл: { winDisplayed }</h3>\n            <h3>Я в ахуе вообще</h3>\n          </p>\n          <img src={Win} alt='win' />\n        </div>\n      ) : null }\n    </React.Fragment>\n  )\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nif (localStorage.getItem('attempts') === null) {\n  localStorage.setItem('attempts', 5)\n};\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}